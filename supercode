import requests
from time import sleep

s = requests.Session()
s.headers.update({'X-API-key': 'GWMV82CC'}) # Dektop

MAX_EXPOSURE = 25000
ORDER_LIMIT = 5000


def get_tick():
    resp = s.get('http://localhost:9999/v1/case')
    if resp.ok:
        case = resp.json()
        return case['tick'], case['status']

def get_bid_ask(ticker):
    payload = {'ticker': ticker}
    resp = s.get ('http://localhost:9999/v1/securities/book', params = payload)
    if resp.ok:
        book = resp.json()
        bid_side_book = book['bids']
        ask_side_book = book['asks']
       
        bid_prices_book = [item["price"] for item in bid_side_book]
        ask_prices_book = [item['price'] for item in ask_side_book]
       
        best_bid_price = bid_prices_book[0]
        best_ask_price = ask_prices_book[0]
 
        return best_bid_price, best_ask_price

def get_time_sales(ticker):
    payload = {'ticker': ticker}
    resp = s.get ('http://localhost:9999/v1/securities/tas', params = payload)
    if resp.ok:
        book = resp.json()
        time_sales_book = [item["quantity"] for item in book]
        return time_sales_book

def get_position():
    resp = s.get ('http://localhost:9999/v1/securities')
    if resp.ok:
        book = resp.json()
        gross_exposure = abs(book[0]['position']) + abs(book[1]['position'] + abs(book[2]['position']))
        return gross_exposure
    
def get_ticker_position(ticker):
    resp = s.get ('http://localhost:9999/v1/securities')
    if resp.ok:
        book = resp.json()
        for i in range(3):
            if ticker == book[i - 1]['ticker']:
                return book[i - 1]['position']

def get_open_orders(ticker):
    payload = {'ticker': ticker}
    resp = s.get ('http://localhost:9999/v1/orders', params = payload)
    if resp.ok:
        orders = resp.json()
        buy_orders = [item for item in orders if item["action"] == "BUY"]
        sell_orders = [item for item in orders if item["action"] == "SELL"]
        return buy_orders, sell_orders

def get_order_status(order_id):
    resp = s.get ('http://localhost:9999/v1/orders' + '/' + str(order_id))
    if resp.ok:
        order = resp.json()
        return order['status']
    
def place_order(ticker, quantity, price, action):
    payload = {'ticker': ticker, 'type': 'LIMIT', 'quantity': quantity, 'price': price, 'action': action}
    resp = s.post('http://localhost:9999/v1/orders', params=payload)
    if resp.ok:
        return resp.json()['order_id']
    return None

def main():
    tick, status = get_tick()
    ticker_list = ['CNR','RY','AC']
     
    while status == 'ACTIVE':
        total_exposure = get_position()
        remaining_exposure = MAX_EXPOSURE - total_exposure

    
            # Step 1: Place buy orders for all stocks at once
        for ticker_symbol in ticker_list:
            best_bid_price, best_ask_price = get_bid_ask(ticker_symbol)
            spread = best_ask_price - best_bid_price
            if spread > 0.02 and remaining_exposure > 0:
                    # Buy 5000 units of each stock
                    order_quantity = min(ORDER_LIMIT, remaining_exposure)
                    if order_quantity > 0:
                        buy_order_id = place_order(ticker_symbol, order_quantity, best_bid_price, 'BUY')
                        sleep(0.5)
                    
        total_exposure = get_position()
        remaining_exposure = MAX_EXPOSURE - total_exposure
        
        # Step 2: Place sell orders for all stocks after buying
        for ticker_symbol in ticker_list:
            ticker_position = get_ticker_position(ticker_symbol)
            best_bid_price, best_ask_price = get_bid_ask(ticker_symbol)
            
            # Sell 5000 units or the current position
            if ticker_position > 0:
                sell_order_id = place_order(ticker_symbol, ticker_position, best_ask_price, 'SELL')
                sleep(1.2)
                
        #s.post('http://localhost:9999/v1/commands/cancel', params = {'ticker': ticker_symbol})
        total_exposure = get_position()
        remaining_exposure = MAX_EXPOSURE - total_exposure

        # Check if all positions are closed
        for ticker_symbol in ticker_list:
            ticker_position = get_ticker_position(ticker_symbol)
            while ticker_position != 0:
                if ticker_position > 0:
                    place_order(ticker_symbol, min(ORDER_LIMIT, abs(ticker_position)), best_ask_price, 'SELL')
                elif ticker_position < 0:
                    place_order(ticker_symbol, min(ORDER_LIMIT, abs(ticker_position)), best_bid_price, 'BUY')
                sleep(0.5)
                #s.post('http://localhost:9999/v1/commands/cancel', params = {'ticker': ticker_symbol})
                ticker_position = get_ticker_position(ticker_symbol)
                best_bid_price, best_ask_price = get_bid_ask(ticker_symbol)

        total_exposure = get_position()
        remaining_exposure = MAX_EXPOSURE - total_exposure
        
        sleep(0.2)
        tick, status = get_tick()

if __name__ == '__main__':
    main()
         
            #cancel trades currently commented
